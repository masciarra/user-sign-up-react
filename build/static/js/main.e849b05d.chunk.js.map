{"version":3,"sources":["logo.svg","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","changeHandler","e","setState","target","name","value","submitHandler","preventDefault","console","log","state","axios","post","then","response","catch","error","firstName","lastName","dateOfBirth","username","password","className","onSubmit","this","type","onChange","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2KAAAA,EAAOC,QAAU,IAA0B,kC,2MCsG5BC,E,kDA/FX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAWVC,cAAgB,SAACC,GACb,EAAKC,SAAL,eAAgBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAb3B,EAgBlBC,cAAgB,SAACL,GAGbA,EAAEM,iBACFC,QAAQC,IAAI,EAAKC,OAEjBC,IACKC,KAAK,6CAA8C,EAAKF,OACxDG,MAAK,SAAAC,GACFN,QAAQC,IAAIK,MAEfC,OAAM,SAAAC,GACPR,QAAQC,IAAIO,OAzBhB,EAAKN,MAAQ,CACTO,UAAW,GACXC,SAAU,GACVC,YAAa,GACbC,SAAU,GACVC,SAAU,IARA,E,qDAiCd,OACI,6BACI,6BACI,+DACA,4DACA,0BAAMC,UAAY,OAAOC,SAAYC,KAAKlB,eACtC,6BACI,6CACA,2BACImB,KAAK,OACLpB,MAAOmB,KAAKd,MAAMO,UAClBS,SAAYF,KAAKxB,cACjBI,KAAK,eAGb,6BACI,4CACA,2BACIqB,KAAK,OACLpB,MAAOmB,KAAKd,MAAMQ,SAClBQ,SAAYF,KAAKxB,cACjBI,KAAK,cAGb,6BACI,gDACA,2BACIqB,KAAK,OACLpB,MAAOmB,KAAKd,MAAMS,YAClBO,SAAYF,KAAKxB,cACjBI,KAAK,iBAGb,6BACI,2CACA,2BACIqB,KAAK,OACLpB,MAAOmB,KAAKd,MAAMU,SAClBM,SAAYF,KAAKxB,cACjBI,KAAK,cAGb,6BACI,2CACA,2BACIqB,KAAK,OACLpB,MAAOmB,KAAKd,MAAMW,SAClBK,SAAYF,KAAKxB,cACjBI,KAAK,cAGb,4BAAQqB,KAAK,UAAb,YAGR,6BACI,uBAAGH,UAAU,cAAb,4B,GA1FDK,aCQJC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCIcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd5B,OAAM,SAAAC,GACLR,QAAQQ,MAAMA,EAAM4B,c","file":"static/js/main.e849b05d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport './Form.css'\nimport axios from 'axios'\n\n\nclass Form extends Component {\n    \n    constructor(props){\n        super(props)\n        // this.submitHandler = this.submitHandler.bind(this);\n        this.state = {\n            firstName: '',\n            lastName: '',\n            dateOfBirth: '',\n            username: '',\n            password: ''\n        }\n    }\n\n    changeHandler = (e) => {\n        this.setState({[e.target.name]: e.target.value});\n    }\n    \n    submitHandler = (e) => {\n        // alert(`${this.state.firstName} ${this.state.lastName} ${this.state.dateOfBirth} ${this.state.username} ${this.state.password}`)\n\n        e.preventDefault()\n        console.log(this.state)\n\n        axios\n            .post('https://jsonplaceholder.typicode.com/posts', this.state)\n            .then(response => {\n                console.log(response)\n            })\n            .catch(error => {\n            console.log(error)\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    <h1>Hello, welcome to our platform.</h1>\n                    <h2>Please proceed with sign up.</h2>\n                    <form className = 'form' onSubmit = {this.submitHandler}>\n                        <div>\n                            <label>First Name</label>\n                            <input \n                                type='text' \n                                value={this.state.firstName} \n                                onChange = {this.changeHandler}\n                                name='firstName'\n                            />\n                        </div>\n                        <div>\n                            <label>Last Name</label>\n                            <input \n                                type='text' \n                                value={this.state.lastName} \n                                onChange = {this.changeHandler}\n                                name='lastName'\n                            />\n                        </div>\n                        <div>\n                            <label>Date of Birth</label>\n                            <input \n                                type='text' \n                                value={this.state.dateOfBirth} \n                                onChange = {this.changeHandler}\n                                name='dateOfBirth'\n                            />\n                        </div>\n                        <div>\n                            <label>Username</label>\n                            <input \n                                type='text' \n                                value={this.state.username} \n                                onChange = {this.changeHandler}\n                                name='username'\n                            />\n                        </div>\n                        <div>\n                            <label>Password</label>\n                            <input \n                                type='text' \n                                value={this.state.password} \n                                onChange = {this.changeHandler}\n                                name='password'\n                            />\n                        </div>\n                        <button type=\"submit\">Submit</button>\n                    </form>\n                </div>\n                <div>\n                    <p className='dobexample'>example: 6/31/2020</p>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Form\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Form from './components/Form'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}